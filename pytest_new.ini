[tool:pytest]
# QuantumFlux Trading Platform - Test Configuration
# Clean Architecture Implementation

# Test Discovery
testpaths = tests_new
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Test Execution
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --cov=src_new
    --cov-report=term-missing
    --cov-report=html:reports_new/coverage
    --cov-report=xml:reports_new/coverage.xml
    --cov-fail-under=80
    --junitxml=reports_new/junit.xml
    --maxfail=5
    --durations=10
    --color=yes
    --disable-warnings

# Parallel Execution
# Uncomment for parallel test execution
# -n auto
# --dist=worksteal

# Test Markers
markers =
    unit: Unit tests (fast, isolated)
    integration: Integration tests (slower, with external dependencies)
    e2e: End-to-end tests (slowest, full system)
    smoke: Smoke tests (critical functionality)
    regression: Regression tests
    performance: Performance tests
    security: Security tests
    api: API tests
    database: Database tests
    trading: Trading-specific tests
    market_data: Market data tests
    strategy: Strategy tests
    risk_management: Risk management tests
    analytics: Analytics tests
    platform_integration: Platform integration tests
    slow: Slow running tests
    fast: Fast running tests
    external: Tests requiring external services
    mock: Tests using mocks
    fixture: Tests using fixtures
    parametrize: Parametrized tests
    skip: Tests to skip
    xfail: Tests expected to fail
    webdriver: Tests using WebDriver
    async: Asynchronous tests
    sync: Synchronous tests
    domain: Domain layer tests
    application: Application layer tests
    infrastructure: Infrastructure layer tests
    presentation: Presentation layer tests

# Test Filtering
# Run only fast tests by default
# addopts = -m "not slow"

# Async Support
asyncio_mode = auto

# Logging
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Warnings
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning:selenium.*
    ignore::UserWarning:urllib3.*
    error::UserWarning:src_new.*

# Test Environment
env =
    ENVIRONMENT = testing
    DATABASE_URL = sqlite:///./test.db
    REDIS_URL = redis://localhost:6379/1
    SECRET_KEY = test-secret-key-not-for-production
    ENCRYPTION_KEY = test-encryption-key-32-characters
    TESTING = true
    DEBUG = false

# Minimum Python Version
minversion = 3.9

# Test Data
tmp_path_retention_count = 3
tmp_path_retention_policy = failed

# Coverage Configuration
[coverage:run]
source = src_new
omit = 
    */tests/*
    */test_*
    */__pycache__/*
    */migrations/*
    */venv/*
    */env/*
    */.venv/*
    */site-packages/*
    */conftest.py
    */setup.py
    */manage.py
    */wsgi.py
    */asgi.py
    */settings/*
    */config/*
    */scripts/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod
    @overload
    TYPE_CHECKING
    \.\.\.

show_missing = true
skip_covered = false
skip_empty = false
sort = Cover

[coverage:html]
directory = reports_new/coverage

[coverage:xml]
output = reports_new/coverage.xml